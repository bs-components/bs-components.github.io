/*! Built with http://stenciljs.com */
const{h:t}=window.bscomponents;import{p as e,o,t as a,s,r as n,q as l}from"./chunk-89dac778.js";import{a as i}from"./chunk-5028a50e.js";import{a as r}from"./chunk-e1923c80.js";import"./chunk-5260d582.js";function g(t,e){if(t.classList)t.classList.toggle(e);else{const o=t.className.split(" "),a=o.indexOf(e);a>=0?o.splice(a,1):o.push(e),t.className=o.join(" ")}}class c{constructor(){this.tabindex="0",this.activeEventName="active.bs.button",this.inactiveEventName="inactive.bs.button",this.active=!1}componentWillLoad(){if(this.addFocusClass=!1,"-1"===this.tabindex&&(this.tabindex=-1),"0"===this.tabindex){const t=this.bsButtonEl.querySelector("input");i(this.bsButtonEl,'[data-toggle="buttons"]')&&t&&(this.addFocusClass=!0,this.tabindex=-1)}let t;if((t="button"===this.bsButtonEl.dataset.toggle?this.bsButtonEl:this.bsButtonEl.querySelector('[data-toggle="button"]'))&&!0===this.active&&(s(t,"active"),t.setAttribute("aria-pressed","true")),i(this.bsButtonEl,'[data-toggle="buttons"]')&&!0===this.active){s(this.bsButtonEl,"active");const t=this.bsButtonEl.querySelector("input");t&&(t.checked=!0,t.setAttribute("checked","checked"))}}handleFocusIn(t){if(!a(this.bsButtonEl,"disabled")&&("-1"===this.tabindex&&(this.tabindex=-1),this.addFocusClass)){const e=i(t.target,".btn");s(e,"focus")}}handleFocusOut(){a(this.bsButtonEl,"disabled")||this.addFocusClass&&n(this.bsButtonEl,"focus")}handleKeyDown(t){if(!a(this.bsButtonEl,"disabled")&&this.bsButtonEl.contains(t.target)){if(32===t.which){if(!this.bsButtonEl.isEqualNode(t.target)){if("button"===o(t.target.tagName)&&"collapse"!==t.target.dataset.toggle&&"modal"!==t.target.dataset.toggle)return;if("a"===o(t.target.tagName)&&"modal"!==t.target.dataset.toggle)return}return t.stopPropagation&&(t.stopPropagation(),t.preventDefault()),"collapse"===t.target.dataset.toggle?void c.handleCollapseToggle(t.target):"modal"===t.target.dataset.toggle?void c.handleModalToggle(t.target):void this.handleToggle(this.bsButtonEl)}if(13===t.which){if(!this.bsButtonEl.isEqualNode(t.target)){if("button"===o(t.target.tagName)&&"collapse"!==t.target.dataset.toggle&&"modal"!==t.target.dataset.toggle)return;if("a"===o(t.target.tagName)&&"collapse"!==t.target.dataset.toggle&&"modal"!==t.target.dataset.toggle)return}return t.stopPropagation&&(t.stopPropagation(),t.preventDefault()),"collapse"===t.target.dataset.toggle?void c.handleCollapseToggle(t.target):"modal"===t.target.dataset.toggle?void c.handleModalToggle(t.target):void this.handleToggle(this.bsButtonEl)}27===t.which&&(t.stopPropagation&&(t.stopPropagation(),t.preventDefault()),document.activeElement.blur(),this.addFocusClass&&n(this.bsButtonEl,"focus"))}}handleButtonClick(t){if(a(this.bsButtonEl,"disabled"))return;"a"===o(t.target.tagName)&&t.stopPropagation&&(t.stopPropagation(),t.preventDefault());const e=i(t.target,'[data-toggle="collapse"]');e&&this.bsButtonEl.contains(e)&&c.handleCollapseToggle(e);const s=i(t.target,'[data-toggle="modal"]');s&&this.bsButtonEl.contains(s)&&c.handleModalToggle(s);const n=i(t.target,'[data-toggle="tab"]');n&&this.bsButtonEl.contains(n)&&this.handleTabToggle(n);const l=i(t.target,'[data-toggle="pill"]');l&&this.bsButtonEl.contains(l)&&this.handleTabToggle(l);const r=i(t.target,'[data-toggle="list"]');r&&this.bsButtonEl.contains(r)&&this.handleTabToggle(r),this.handleToggle(t.target)}static handleCollapseToggle(t){const e=r(t);if(e){const o=[],a=Array.prototype.slice.call(document.querySelectorAll(e));for(let e=0,s=a.length;e<s;e+=1)a[e].collapse?(a[e].collapse("toggle",t),a[e].dataset.parent&&o.push(a[e].dataset.parent)):console.error('Unable to toggle collapse for all targets due to unavailable bs-collapse method "collapse');const s=function(t){const e=[],o=[];for(let a=0,s=t.length;a<s;a+=1)-1===e.indexOf(t[a])?e.push(t[a]):-1===o.indexOf(t[a])&&o.push(t[a]);return o}(o);for(let t=0,e=s.length;t<e;t+=1)console.warn(`Found multiple instances for selector ${s[t]}\n                      You are trying to toggle multiple collapses that have the same parent accordion (${s[t]}).\n                      Normally only one item in an accordion is toggled at one time.`)}}static handleModalToggle(t){const e=r(t);if(e)try{const o=document.querySelector(e);o.modal&&o.modal("toggle",t)}catch(t){console.log("bs-button modal toggle target must be a valid css selector string"),console.error(t.message)}}handleTabToggle(t){const e=this.getTabToggler(t);if(!e)throw new Error('tab method can only be run on a bs-button that contains [data-toggle="tab"], [data-toggle="pill"], or data-toggle="list"');const o=r(e);if(!o)throw new Error(`invalid tab selector: "${o}"`);try{const t=document.querySelector(o);if(!t)throw new Error(`unable to find tab target selector "${o}"`);t.tab&&t.tab("show",e)}catch(t){console.log("bs-button modal toggle target must be a valid css selector string"),console.error(t.message)}}handleToggle(t){if(a(this.bsButtonEl,"disabled"))return;if(!t||!this.bsButtonEl.contains(t))throw new Error("Invalid element unable to toggle");let e=!0,o=!0;const s=i(t,'[data-toggle="buttons"]');if(s){const t=this.bsButtonEl.querySelector("input");if(t){if("radio"===t.type)if(t.checked&&a(this.bsButtonEl,"active"))e=!1;else{const t=s.querySelector(".active");t&&(n(t,"active"),l(t,this.inactiveEventName,{},this.bsButtonEl))}e&&(a(this.bsButtonEl,"active")?(t.checked=!1,t.removeAttribute("checked")):(t.checked=!0,t.setAttribute("checked","checked")),l(t,"change")),this.addFocusClass&&t.focus(),o=!1}if(e){const t=!0===a(this.bsButtonEl,"active")?this.inactiveEventName:this.activeEventName;if(l(this.bsButtonEl,t,{active:!a(this.bsButtonEl,"active")}).defaultPrevented)return;g(this.bsButtonEl,"active")}return void(o&&this.bsButtonEl.setAttribute("aria-pressed",a(this.bsButtonEl,"active")?"true":"false"))}const r=i(t,'[data-toggle="button"]');if(this.bsButtonEl.contains(r)&&r){const t=a(this.bsButtonEl,"active")?this.inactiveEventName:this.activeEventName;if(l(r,t).defaultPrevented)return;g(r,"active"),r.setAttribute("aria-pressed",a(this.bsButtonEl,"active")?"true":"false")}}handleActiveWatch(t){if(i(this.bsButtonEl,'[data-toggle="buttons"]')){if(!t&&!a(this.bsButtonEl,"active"))return;if(t&&a(this.bsButtonEl,"active"))return;return void this.handleToggle(this.bsButtonEl)}let e;if(e="button"===this.bsButtonEl.dataset.toggle?this.bsButtonEl:this.bsButtonEl.querySelector('[data-toggle="button"]')){if(!t&&!a(e,"active"))return;if(t&&a(e,"active"))return;this.handleToggle(e)}}dropdown(t={}){if("dropdown"!==this.bsButtonEl.dataset.toggle)throw new Error('dropdown method can only be run on a bs-button with [data-toggle="dropdown"]');const e=i(this.bsButtonEl,"bs-dropdown");if(!e)throw new Error("unable to find parent bs-dropdown component");return"get-show"===t?e.show:"get-config"===t?e.config:"get-defaults"===t?e.defaults:e.dropdown(t,this.bsButtonEl)}getTabToggler(t){if("tab"===t.dataset.toggle||"pill"===t.dataset.toggle||"list"===t.dataset.toggle)return t;const e=this.bsButtonEl.querySelector('[data-toggle="tab"]');if(e)return e;const o=this.bsButtonEl.querySelector('[data-toggle="pill"]');return o||(this.bsButtonEl.querySelector('[data-toggle="list"]')||null)}tab(t={}){const e=this.getTabToggler(this.bsButtonEl);if(!e)throw new Error('tab method can only be run on a bs-button that contains [data-toggle="tab"], [data-toggle="pill"], or data-toggle="list"');const o=r(e);if(!o)throw new Error(`invalid tab selector: "${o}"`);try{const a=document.querySelector(o);if(!a)throw new Error(`unable to find tab target selector "${o}"`);if(a.tab)return a.tab(t,e)}catch(t){console.log("bs-button modal toggle target must be a valid css selector string"),console.error(t.message)}return null}button(t={}){if(0===e(t))return this.bsButtonEl;if("toggle"===t)return this.handleToggle(this.bsButtonEl),!0;if("string"==typeof t)throw new Error(`No method named "${t}"`);return null}render(){return t("slot",null)}static get is(){return"bs-button"}static get properties(){return{active:{type:Boolean,attr:"active",mutable:!0,watchCallbacks:["handleActiveWatch"]},activeEventName:{type:String,attr:"active-event-name"},addFocusClass:{state:!0},bsButtonEl:{elementRef:!0},button:{method:!0},dropdown:{method:!0},inactiveEventName:{type:String,attr:"inactive-event-name"},tab:{method:!0},tabindex:{type:"Any",attr:"tabindex",reflectToAttr:!0,mutable:!0}}}static get listeners(){return[{name:"focusin",method:"handleFocusIn"},{name:"focusout",method:"handleFocusOut"},{name:"keydown",method:"handleKeyDown"},{name:"click",method:"handleButtonClick"}]}}export{c as BsButton};